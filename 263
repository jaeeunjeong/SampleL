import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.*;
import org.springframework.jdbc.core.*;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.stereotype.Repository;
import javax.annotation.PostConstruct;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
/*
 * www.testdome.com/d/java-spring-interview-questions/263
 * 
 * Modify the createMovie and findMoviesByName methods of the class MovieRepository.
 * Using JdbcTemplate, createMovie method should insert a new row into the movies table with the specified data.
 * Using JdbcTemplate, findMoviesByName should return a list of all movies from the 'movies' table,
 * 		in which the name of the movie contains the likeName string, using the LIKE operator. 
 * The returned list should contain Movie objects with name, year, and rating fields correctly set.
 * */
class Movie {
    public String name;
    public int year;
    public int rating;
    
    public Movie(String name, int year, int rating) {
        this.name = name;
        this.year = year;
        this.rating = rating;
    }
}


@Configuration
@Import(MovieRepository.class)
class Config {
    @Bean
    public DriverManagerDataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("org.h2.Driver");
        ds.setUrl("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
        return ds;
    }
    @Bean
    public JdbcTemplate jdbcTemplate(DriverManagerDataSource ds) {
        return new JdbcTemplate(ds);
    }
}
@Repository
public class MovieRepository {

    @Autowired
    private JdbcTemplate template;

    @PostConstruct
    public void createTable() {
        template.execute("CREATE TABLE movies (id bigint auto_increment primary key, name VARCHAR(50), year int, rating int) ");
    }
    //Using JdbcTemplate, createMovie method should insert a new row into the movies table with the specified data.
    public void createMovie(String name, int year, int rating) {
    	String sql = "INSERT INTO movies (name, year, rating) VALUES (?, ?, ?)";
    	template.update(sql, new Object[]{name, year, rating});

    }
    /* Using JdbcTemplate, findMoviesByName should return a list of all movies from the 'movies' table,
     * in which the name of the movie contains the likeName string, using the LIKE operator. 
     * */
    
    public List<Movie> findMoviesByName(String likeName) {
        AnnotationConfigApplicationContext config = new AnnotationConfigApplicationContext();
        config.register(Config.class);
        config.refresh();
    	String sql = "SELECT * FROM movies WHERE name LIKES ? ";
    	MovieRepository repository = config.getBean(MovieRepository.class);
    	List<Movie> movie = (List<Movie>) template.queryForMap(sql,likeName, repository);


    	
        return movie;
    }
    
    public static void main(String[] args) {
        AnnotationConfigApplicationContext config = new AnnotationConfigApplicationContext();
        config.register(Config.class);
        config.refresh();
        MovieRepository repository = config.getBean(MovieRepository.class);

        repository.createMovie("Some movie", 1974, 3);
        repository.createMovie("Some other movie", 1993, 2);

        List<Movie> movies = repository.findMoviesByName("Some%");
        for(Movie movie : movies) {
            System.out.println(movie.name + " - " + movie.year + " - " + movie.rating);
        }
    }
}
